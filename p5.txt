from sklearn import datasets,preprocessing,neighbors
from sklearn.datasets import load_iris
import numpy as np 
from sklearn.model_selection import train_test_split 
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt 
from sklearn.metrics import classification_report,confusion_matrix 


iris=datasets.load_iris()

print("iris data")
print(iris)
print("\n")
print("Iris feature_names")
print("\n")
print(iris.feature_names)
print("\n")
print("Integers representing features(0=setosa,1=versicolor,2=virginica)")
print("\n")
print("Iris target")
print("\n")
print(iris.target)
print("\n")
print("3 classes of target")
print("\n")
print(iris.target_names)
print("\n")
print("total of 150 observations and refeatures")
print("\n")
print(iris.data.shape)
print("\n")

x,y=iris.data,iris.target
x_train,x_test,y_train,y_test=train_test_split(x,y,stratify=y,random_state=0,train_size=0.7)

print("shape of train and test objects")
print("\n")
print(x_train.shape)
print("x_test shape")
print("\n")
print(y_train)
print("\n")
print(y_test)
print("\n")
print(y_train.shape)
print("\n")
print(y_test.shape)
print("\n")

scalar=preprocessing.StandardScaler().fit(x_train)
x_train=scalar.transform(x_train)
print("display scaled data")
print(x_train)
print("\n")
x_test=scalar.transform(x_test)

scores=[]
k_range=range(1,15)
for k in k_range:
  knn=neighbors.KNeighborsClassifier(n_neighbors=k)
  knn.fit(x_train,y_train)
  y_pred=knn.predict(x_test)

  # Use parenthesis () to call the format function on the string object
print("Prediction of species:{}".format(y_pred))
print("Accuracy score is")
print(accuracy_score(y_test,y_pred))
print("Confusion matrix")
print(confusion_matrix(y_test,y_pred))
print("Classification report")
print(classification_report(y_test,y_pred))
